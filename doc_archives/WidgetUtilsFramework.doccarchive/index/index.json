{"interfaceLanguages":{"occ":[{"children":[{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/wigetutilsversionnumber","title":"WigetUtilsVersionNumber","type":"var"},{"path":"\/documentation\/widgetutilsframework\/wigetutilsversionstring","title":"WigetUtilsVersionString","type":"var"}],"path":"\/documentation\/widgetutilsframework","title":"WidgetUtilsFramework","type":"module"}],"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/jwecrypter\/decrypt(jwecompact:localkeypair:)","title":"static func decrypt(jweCompact: String, localKeyPair: ECKeyPair) -> Result<Data, Error>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/jwecrypter\/encrypt(plaintext:encryptionheader:ephemeralkeypair:)","title":"static func encrypt(plaintext: Data, encryptionHeader: EncryptionHeader, ephemeralKeyPair: ECKeyPair?) -> Result<String, Error>","type":"method"}],"path":"\/documentation\/widgetutilsframework\/jwecrypter","title":"JweCrypter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/init(communicator:accesstoken:tracestate:)","title":"init(communicator: Communicator, accessToken: String, traceState: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/lastaccesstoken","title":"let lastAccessToken: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/lasttracestate","title":"var lastTraceState: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/callnetworkservice(path:method:)","title":"func callNetworkService<T>(path: String, method: CommunicatorFramework.Method) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/cancel()","title":"func cancel() async -> Swift.Result<Void, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/initialize(request:)","title":"func initialize<T>(request: Encodable) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/poll(httprequest:)","title":"func poll<T>(httpRequest: HttpRequest) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkservice\/verify(request:)","title":"func verify<T>(request: Encodable) async -> Swift.Result<T, E>","type":"method"}],"path":"\/documentation\/widgetutilsframework\/networkservice","title":"NetworkService","type":"class"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/urlconstants\/urlpathcancel","title":"static let urlPathCancel: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/urlconstants\/urlpathinitialize","title":"static let urlPathInitialize: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/urlconstants\/urlpathpoll","title":"static let urlPathPoll: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/urlconstants\/urlpathverify","title":"static let urlPathVerify: String","type":"property"}],"path":"\/documentation\/widgetutilsframework\/urlconstants","title":"URLConstants","type":"class"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/utils\/checkexpiration(localexpiration:)","title":"static func checkExpiration<E>(localExpiration: Date) -> E?","type":"method"},{"path":"\/documentation\/widgetutilsframework\/utils\/checkregex(input:checkingregex:)","title":"static func checkRegex(input: String, checkingRegex: String) -> Bool","type":"method"}],"path":"\/documentation\/widgetutilsframework\/utils","title":"Utils","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/expirederror\/expiredcase","title":"static var expiredCase: Self","type":"property"}],"path":"\/documentation\/widgetutilsframework\/expirederror","title":"ExpiredError","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/jsendwidgeterror\/init(error:)","title":"init(error: MonetJSendNetworkControlError)","type":"init"}],"path":"\/documentation\/widgetutilsframework\/jsendwidgeterror","title":"JsendWidgetError","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/e","title":"E","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/lastaccesstoken","title":"var lastAccessToken: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/lasttracestate","title":"var lastTraceState: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/callnetworkservice(path:method:)","title":"func callNetworkService<T>(path: String, method: CommunicatorFramework.Method) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/cancel()","title":"func cancel() async -> Swift.Result<Void, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/initialize(request:)","title":"func initialize<T>(request: Encodable) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/poll(httprequest:)","title":"func poll<T>(httpRequest: HttpRequest) async -> Swift.Result<T, E>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/networkserviceable\/verify(request:)","title":"func verify<T>(request: Encodable) async -> Swift.Result<T, E>","type":"method"}],"path":"\/documentation\/widgetutilsframework\/networkserviceable","title":"NetworkServiceable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/unsupportedalgtypeerror\/unsupportedalgtype","title":"static var unsupportedAlgType: Self","type":"property"}],"path":"\/documentation\/widgetutilsframework\/unsupportedalgtypeerror","title":"UnsupportedAlgTypeError","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blocker\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blocker\/target","title":"let target: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/blocker\/type","title":"let type: BlockerType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blocker\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/widgetutilsframework\/blocker","title":"Blocker","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/emptydata\/init()","title":"init()","type":"init"},{"path":"\/documentation\/widgetutilsframework\/emptydata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/widgetutilsframework\/emptydata","title":"EmptyData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/emptyrequest\/init()","title":"init()","type":"init"}],"path":"\/documentation\/widgetutilsframework\/emptyrequest","title":"EmptyRequest","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/encryptionheader\/alg","title":"let alg: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/encryptionheader\/enc","title":"let enc: String","type":"property"},{"path":"\/documentation\/widgetutilsframework\/encryptionheader\/epk","title":"let epk: ECPublicKey","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/encryptionheader\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/widgetutilsframework\/encryptionheader\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/encryptionheader\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/widgetutilsframework\/encryptionheader\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/widgetutilsframework\/encryptionheader","title":"EncryptionHeader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/expiration\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/expiration\/localexpiration","title":"var localExpiration: Date","type":"property"},{"path":"\/documentation\/widgetutilsframework\/expiration\/seconds","title":"let seconds: Int","type":"property"},{"path":"\/documentation\/widgetutilsframework\/expiration\/timestamp","title":"let timestamp: String","type":"property"}],"path":"\/documentation\/widgetutilsframework\/expiration","title":"Expiration","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/hash(password:algtype:salt:nonce:)","title":"func hash<E>(password: String, algType: UInt?, salt: Data, nonce: Data) -> Swift.Result<String, E>","type":"func"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blockertype\/permanent","title":"case permanent","type":"case"},{"path":"\/documentation\/widgetutilsframework\/blockertype\/temporary(expiration:)","title":"case temporary(expiration: Expiration)","type":"case"},{"path":"\/documentation\/widgetutilsframework\/blockertype\/warning","title":"case warning","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blockertype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/blockertype\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/widgetutilsframework\/blockertype","title":"BlockerType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/httprequest\/get","title":"case get","type":"case"},{"path":"\/documentation\/widgetutilsframework\/httprequest\/post(body:)","title":"case post(body: Encodable)","type":"case"}],"path":"\/documentation\/widgetutilsframework\/httprequest","title":"HttpRequest","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/widgetutilsframework\/swift\/result\/flatmap(_:)","title":"func flatMap<NewSuccess>((Success) async -> Swift.Result<NewSuccess, Failure>) async -> Swift.Result<NewSuccess, Failure>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/swift\/result\/flatmaperror(_:)","title":"func flatMapError<NewFailure>((Failure) async -> Result<Success, NewFailure>) async -> Result<Success, NewFailure>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/swift\/result\/map(_:)","title":"func map<NewSuccess>((Success) async -> NewSuccess) async -> Swift.Result<NewSuccess, Failure>","type":"method"},{"path":"\/documentation\/widgetutilsframework\/swift\/result\/maperror(_:)","title":"func mapError<NewFailure>((Failure) async -> NewFailure) async -> Result<Success, NewFailure>","type":"method"}],"path":"\/documentation\/widgetutilsframework\/swift\/result","title":"Result","type":"extension"}],"path":"\/documentation\/widgetutilsframework\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/widgetutilsframework","title":"WidgetUtilsFramework","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}